'use client'

import { Note } from '@/types'
import { useTheme } from '@/contexts/ThemeContext'
import { Button } from './Button'
import { FileText, Star, Trash2, ChevronUp, ChevronDown } from 'lucide-react'
import { useState } from 'react'

interface NotesListProps {
  notes: Note[]
  selectedNoteId: string | null
  onSelectNote: (note: Note) => void
  onDeleteNote: (noteId: string) => void
  onStarNote: (noteId: string, isStarred: boolean) => void
  onMoveNote: (noteId: string, direction: 'up' | 'down') => void
}

export function NotesList({ 
  notes, 
  selectedNoteId, 
  onSelectNote, 
  onDeleteNote,
  onStarNote,
  onMoveNote,
}: NotesListProps) {
  const { isDarkMode } = useTheme()
  const [deleteConfirmId, setDeleteConfirmId] = useState<string | null>(null)

  const sortedNotes = [...notes].sort((a, b) => {
    // First by starred status
    if (a.is_starred && !b.is_starred) return -1
    if (!a.is_starred && b.is_starred) return 1
    // Then by order if available
    if (a.order !== undefined && b.order !== undefined) {
      return a.order - b.order
    }
    // Finally by updated date
    return new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()
  })

  if (notes.length === 0) {
    return (
      <div className="h-full flex flex-col items-center justify-center gap-4 text-center p-4">
        <FileText className={`w-12 h-12 ${isDarkMode ? 'text-gray-600' : 'text-gray-400'}`} />
        <div>
          <h3 className={`font-medium ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
            No notes yet
          </h3>
          <p className={`text-sm ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
            Create your first note to get started
          </p>
        </div>
      </div>
    )
  }

  return (
    <div className="h-full overflow-auto space-y-2 p-2">
      {sortedNotes.map((note, index) => (
        <div
          key={note.id}
          className={`
            relative group rounded-lg border cursor-pointer
            transition-all duration-200
            ${selectedNoteId === note.id 
              ? isDarkMode ? 'bg-gray-700 border-gray-600' : 'bg-gray-100 border-gray-200'
              : isDarkMode ? 'bg-gray-800 border-gray-700 hover:bg-gray-700' : 'bg-white border-gray-200 hover:bg-gray-50'
            }
          `}
        >
          {/* Move buttons */}
          <div className={`
            absolute left-0 inset-y-0 -ml-8 flex flex-col justify-center gap-1
            opacity-0 group-hover:opacity-100 transition-opacity
          `}>
            <button
              onClick={(e) => {
                e.stopPropagation()
                onMoveNote(note.id, 'up')
              }}
              disabled={index === 0}
              className={`
                p-1 rounded-full
                ${isDarkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-200'}
                disabled:opacity-50 disabled:cursor-not-allowed
              `}
            >
              <ChevronUp className="w-4 h-4" />
            </button>
            <button
              onClick={(e) => {
                e.stopPropagation()
                onMoveNote(note.id, 'down')
              }}
              disabled={index === notes.length - 1}
              className={`
                p-1 rounded-full
                ${isDarkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-200'}
                disabled:opacity-50 disabled:cursor-not-allowed
              `}
            >
              <ChevronDown className="w-4 h-4" />
            </button>
          </div>

          <div
            onClick={() => onSelectNote(note)}
            className="p-3"
          >
            <div className="flex items-center justify-between mb-1">
              <h3 className={`font-medium truncate ${isDarkMode ? 'text-white' : 'text-gray-900'}`}>
                {note.title || 'Untitled'}
              </h3>
              <div className="flex items-center gap-2">
                <button
                  onClick={(e) => {
                    e.stopPropagation()
                    onStarNote(note.id, !note.is_starred)
                  }}
                  className={`
                    p-1 rounded transition-colors
                    ${isDarkMode ? 'hover:bg-gray-600' : 'hover:bg-gray-200'}
                  `}
                >
                  <Star 
                    className={`w-4 h-4 ${
                      note.is_starred 
                        ? 'fill-yellow-500 text-yellow-500' 
                        : isDarkMode ? 'text-gray-400' : 'text-gray-500'
                    }`} 
                  />
                </button>
                <div onClick={(e) => e.stopPropagation()}>
                  {deleteConfirmId === note.id ? (
                    <div className="flex items-center gap-2">
                      <Button
                        size="sm"
                        variant="default"
                        onClick={() => setDeleteConfirmId(null)}
                      >
                        Cancel
                      </Button>
                      <Button
                        size="sm"
                        variant="danger"
                        onClick={() => {
                          onDeleteNote(note.id)
                          setDeleteConfirmId(null)
                        }}
                      >
                        Delete
                      </Button>
                    </div>
                  ) : (
                    <Button
                      size="sm"
                      variant="danger"
                      isIconOnly
                      onClick={() => setDeleteConfirmId(note.id)}
                      className="opacity-0 group-hover:opacity-100 transition-opacity"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  )}
                </div>
              </div>
            </div>
            <p className={`text-sm truncate ${isDarkMode ? 'text-gray-400' : 'text-gray-500'}`}>
              {(note.content || '').replace(/<[^>]*>/g, '').slice(0, 100)}
            </p>
            {note.tags && note.tags.length > 0 && (
              <div className="flex gap-1 mt-2">
                {note.tags.slice(0, 3).map(tag => (
                  <span
                    key={tag}
                    className={`
                      px-2 py-0.5 rounded-full text-xs
                      ${isDarkMode 
                        ? 'bg-gray-700 text-gray-300' 
                        : 'bg-gray-100 text-gray-600'
                      }
                    `}
                  >
                    {tag}
                  </span>
                ))}
                {note.tags.length > 3 && (
                  <span className={`
                    px-2 py-0.5 rounded-full text-xs
                    ${isDarkMode 
                      ? 'bg-gray-700 text-gray-300' 
                      : 'bg-gray-100 text-gray-600'
                    }
                  `}>
                    +{note.tags.length - 3}
                  </span>
                )}
              </div>
            )}
          </div>
        </div>
      ))}
    </div>
  )
}